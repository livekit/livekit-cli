package agentfs

import (
	"archive/tar"
	"compress/gzip"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func TestUVLockFileInclusion(t *testing.T) {
	tempDir := t.TempDir()

	// Create a UV project structure
	files := map[string]string{
		"pyproject.toml": `[project]
name = "test-agent"
version = "1.0.0"
dependencies = ["livekit-agents"]

[dependency-groups]
dev = ["pytest"]
`,
		"uv.lock": `# This file is @generated by uv.
# It is not intended for manual editing.
version = 1
requires-python = ">=3.9"

[[package]]
name = "livekit-agents"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
`,
		"src/agent.py": `# LiveKit agent
import asyncio
from livekit.agents import cli

if __name__ == "__main__":
    cli.run_app()
`,
		".env":      "SECRET_KEY=test", // This should be excluded
		"README.md": "# Test Agent",
	}

	for filePath, content := range files {
		fullPath := filepath.Join(tempDir, filePath)
		os.MkdirAll(filepath.Dir(fullPath), 0755)
		os.WriteFile(fullPath, []byte(content), 0644)
	}

	// Create a mock HTTP server to receive the upload
	var uploadedContent []byte
	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if r.Method != "PUT" {
			t.Errorf("Expected PUT request, got %s", r.Method)
			return
		}

		var err error
		uploadedContent, err = io.ReadAll(r.Body)
		if err != nil {
			t.Errorf("Failed to read upload body: %v", err)
			return
		}

		w.WriteHeader(http.StatusOK)
	}))
	defer server.Close()

	// Test tarball upload
	err := UploadTarball(tempDir, server.URL, []string{})
	if err != nil {
		t.Fatalf("UploadTarball failed: %v", err)
	}

	// Analyze the uploaded tarball content
	uploadedFiles, err := extractTarballFiles(uploadedContent)
	if err != nil {
		t.Fatalf("Failed to extract tarball: %v", err)
	}

	// Verify that uv.lock is included
	if !contains(uploadedFiles, "uv.lock") {
		t.Errorf("uv.lock should be included in tarball uploads, got files: %v", uploadedFiles)
	}

	// Verify that pyproject.toml is included
	if !contains(uploadedFiles, "pyproject.toml") {
		t.Errorf("pyproject.toml should be included in tarball uploads")
	}

	// Verify that source files are included
	if !contains(uploadedFiles, "src/agent.py") {
		t.Errorf("src/agent.py should be included in tarball uploads")
	}

	// Verify that README is included
	if !contains(uploadedFiles, "README.md") {
		t.Errorf("README.md should be included in tarball uploads")
	}

	// Verify that .env files are excluded (security)
	if contains(uploadedFiles, ".env") {
		t.Errorf(".env files should be excluded from tarball uploads for security")
	}

	t.Logf("✓ UV lock file inclusion working correctly")
	t.Logf("Uploaded files: %v", uploadedFiles)
}

func TestLockFileValidation(t *testing.T) {
	tempDir := t.TempDir()

	// Test UV project without uv.lock
	os.WriteFile(filepath.Join(tempDir, "pyproject.toml"), []byte(`[project]
name = "test"
[dependency-groups]
dev = ["pytest"]
`), 0644)

	// Check UV detection
	projectType, err := DetectProjectType(tempDir)
	if err != nil {
		t.Errorf("Expected DetectProjectType to succeed: %v", err)
	}
	if projectType != ProjectTypePythonUV {
		t.Errorf("Project should be detected as UV project, got %s", projectType)
	}

	// Check that uv.lock doesn't exist
	uvLockPath := filepath.Join(tempDir, "uv.lock")
	if _, err := os.Stat(uvLockPath); err == nil {
		t.Errorf("uv.lock should not exist for this test")
	}

	t.Logf("✓ Lock file validation test setup correct")
}

func TestPipProjectsUnaffected(t *testing.T) {
	tempDir := t.TempDir()

	// Create a pip-based project
	files := map[string]string{
		"requirements.txt": `livekit-agents==1.2.0
pytest==7.0.0
`,
		"main.py": `# Simple agent
print("Hello from pip project")
`,
	}

	for filePath, content := range files {
		fullPath := filepath.Join(tempDir, filePath)
		os.WriteFile(fullPath, []byte(content), 0644)
	}

	// Verify pip detection
	projectType, err := DetectProjectType(tempDir)
	if err != nil {
		t.Errorf("Expected DetectProjectType to succeed: %v", err)
	}
	if !projectType.IsPython() {
		t.Errorf("Project should be detected as Python project, got %s", projectType)
	}
	if projectType == ProjectTypePythonUV {
		t.Errorf("Project should NOT be detected as UV project, got %s", projectType)
	}

	// Mock upload test
	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
	}))
	defer server.Close()

	err = UploadTarball(tempDir, server.URL, []string{})
	if err != nil {
		t.Errorf("Pip project upload should work fine: %v", err)
	}

	t.Logf("✓ Pip projects unaffected by UV changes")
}

// Helper function to extract files from gzipped tarball
func extractTarballFiles(data []byte) ([]string, error) {
	var files []string

	gzipReader, err := gzip.NewReader(strings.NewReader(string(data)))
	if err != nil {
		return nil, err
	}
	defer gzipReader.Close()

	tarReader := tar.NewReader(gzipReader)
	for {
		header, err := tarReader.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, err
		}

		if header.Typeflag == tar.TypeReg {
			files = append(files, header.Name)
		}
	}

	return files, nil
}

// Helper function to check if slice contains string
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}
